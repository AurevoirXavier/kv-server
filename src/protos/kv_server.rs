// This file is generated by rust-protobuf 2.7.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `kv_server.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_7_0;

#[derive(PartialEq, Clone, Default)]
pub struct Request {
    // message fields
    pub operation: Operation,
    pub key: ::std::string::String,
    pub value: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Request {
    fn default() -> &'a Request {
        <Request as ::protobuf::Message>::default_instance()
    }
}

impl Request {
    pub fn new() -> Request {
        ::std::default::Default::default()
    }

    // .kv_server.Operation operation = 1;


    pub fn get_operation(&self) -> Operation {
        self.operation
    }
    pub fn clear_operation(&mut self) {
        self.operation = Operation::PUT;
    }

    // Param is passed by value, moved
    pub fn set_operation(&mut self, v: Operation) {
        self.operation = v;
    }

    // string key = 2;


    pub fn get_key(&self) -> &str {
        &self.key
    }
    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::string::String) {
        self.key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::string::String {
        &mut self.key
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.key, ::std::string::String::new())
    }

    // string value = 3;


    pub fn get_value(&self) -> &str {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.value, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.operation, 1, &mut self.unknown_fields)?
                }
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.key)?;
                }
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.value)?;
                }
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.operation != Operation::PUT {
            my_size += ::protobuf::rt::enum_size(1, self.operation);
        }
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.key);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.operation != Operation::PUT {
            os.write_enum(1, self.operation.value())?;
        }
        if !self.key.is_empty() {
            os.write_string(2, &self.key)?;
        }
        if !self.value.is_empty() {
            os.write_string(3, &self.value)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Request {
        Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Operation>>(
                    "operation",
                    |m: &Request| { &m.operation },
                    |m: &mut Request| { &mut m.operation },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "key",
                    |m: &Request| { &m.key },
                    |m: &mut Request| { &mut m.key },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "value",
                    |m: &Request| { &m.value },
                    |m: &mut Request| { &mut m.value },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Request>(
                    "Request",
                    fields,
                    file_descriptor_proto(),
                )
            })
        }
    }

    fn default_instance() -> &'static Request {
        static mut instance: ::protobuf::lazy::Lazy<Request> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Request,
        };
        unsafe {
            instance.get(Request::new)
        }
    }
}

impl ::protobuf::Clear for Request {
    fn clear(&mut self) {
        self.operation = Operation::PUT;
        self.key.clear();
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Request {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq, Clone, Default)]
pub struct Response {
    // message fields
    pub status: Status,
    pub value: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Response {
    fn default() -> &'a Response {
        <Response as ::protobuf::Message>::default_instance()
    }
}

impl Response {
    pub fn new() -> Response {
        ::std::default::Default::default()
    }

    // .kv_server.Status status = 1;


    pub fn get_status(&self) -> Status {
        self.status
    }
    pub fn clear_status(&mut self) {
        self.status = Status::OK;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: Status) {
        self.status = v;
    }

    // string value = 2;


    pub fn get_value(&self) -> &str {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.value, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 1, &mut self.unknown_fields)?
                }
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.value)?;
                }
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.status != Status::OK {
            my_size += ::protobuf::rt::enum_size(1, self.status);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.status != Status::OK {
            os.write_enum(1, self.status.value())?;
        }
        if !self.value.is_empty() {
            os.write_string(2, &self.value)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Response {
        Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Status>>(
                    "status",
                    |m: &Response| { &m.status },
                    |m: &mut Response| { &mut m.status },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "value",
                    |m: &Response| { &m.value },
                    |m: &mut Response| { &mut m.value },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Response>(
                    "Response",
                    fields,
                    file_descriptor_proto(),
                )
            })
        }
    }

    fn default_instance() -> &'static Response {
        static mut instance: ::protobuf::lazy::Lazy<Response> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Response,
        };
        unsafe {
            instance.get(Response::new)
        }
    }
}

impl ::protobuf::Clear for Response {
    fn clear(&mut self) {
        self.status = Status::OK;
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Response {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq, Clone, Default)]
pub struct ScanRequest {
    // message fields
    pub range: i64,
    pub regex: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ScanRequest {
    fn default() -> &'a ScanRequest {
        <ScanRequest as ::protobuf::Message>::default_instance()
    }
}

impl ScanRequest {
    pub fn new() -> ScanRequest {
        ::std::default::Default::default()
    }

    // int64 range = 2;


    pub fn get_range(&self) -> i64 {
        self.range
    }
    pub fn clear_range(&mut self) {
        self.range = 0;
    }

    // Param is passed by value, moved
    pub fn set_range(&mut self, v: i64) {
        self.range = v;
    }

    // string regex = 3;


    pub fn get_regex(&self) -> &str {
        &self.regex
    }
    pub fn clear_regex(&mut self) {
        self.regex.clear();
    }

    // Param is passed by value, moved
    pub fn set_regex(&mut self, v: ::std::string::String) {
        self.regex = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_regex(&mut self) -> &mut ::std::string::String {
        &mut self.regex
    }

    // Take field
    pub fn take_regex(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.regex, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ScanRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.range = tmp;
                }
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.regex)?;
                }
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.range != 0 {
            my_size += ::protobuf::rt::value_size(2, self.range, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.regex.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.regex);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.range != 0 {
            os.write_int64(2, self.range)?;
        }
        if !self.regex.is_empty() {
            os.write_string(3, &self.regex)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ScanRequest {
        ScanRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "range",
                    |m: &ScanRequest| { &m.range },
                    |m: &mut ScanRequest| { &mut m.range },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "regex",
                    |m: &ScanRequest| { &m.regex },
                    |m: &mut ScanRequest| { &mut m.regex },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ScanRequest>(
                    "ScanRequest",
                    fields,
                    file_descriptor_proto(),
                )
            })
        }
    }

    fn default_instance() -> &'static ScanRequest {
        static mut instance: ::protobuf::lazy::Lazy<ScanRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ScanRequest,
        };
        unsafe {
            instance.get(ScanRequest::new)
        }
    }
}

impl ::protobuf::Clear for ScanRequest {
    fn clear(&mut self) {
        self.range = 0;
        self.regex.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ScanRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ScanRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq, Clone, Default)]
pub struct ScanResponse {
    // message fields
    pub status: Status,
    pub key: ::std::string::String,
    pub value: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ScanResponse {
    fn default() -> &'a ScanResponse {
        <ScanResponse as ::protobuf::Message>::default_instance()
    }
}

impl ScanResponse {
    pub fn new() -> ScanResponse {
        ::std::default::Default::default()
    }

    // .kv_server.Status status = 1;


    pub fn get_status(&self) -> Status {
        self.status
    }
    pub fn clear_status(&mut self) {
        self.status = Status::OK;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: Status) {
        self.status = v;
    }

    // string key = 2;


    pub fn get_key(&self) -> &str {
        &self.key
    }
    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::string::String) {
        self.key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::string::String {
        &mut self.key
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.key, ::std::string::String::new())
    }

    // string value = 3;


    pub fn get_value(&self) -> &str {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.value, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ScanResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 1, &mut self.unknown_fields)?
                }
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.key)?;
                }
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.value)?;
                }
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.status != Status::OK {
            my_size += ::protobuf::rt::enum_size(1, self.status);
        }
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.key);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.status != Status::OK {
            os.write_enum(1, self.status.value())?;
        }
        if !self.key.is_empty() {
            os.write_string(2, &self.key)?;
        }
        if !self.value.is_empty() {
            os.write_string(3, &self.value)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ScanResponse {
        ScanResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Status>>(
                    "status",
                    |m: &ScanResponse| { &m.status },
                    |m: &mut ScanResponse| { &mut m.status },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "key",
                    |m: &ScanResponse| { &m.key },
                    |m: &mut ScanResponse| { &mut m.key },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "value",
                    |m: &ScanResponse| { &m.value },
                    |m: &mut ScanResponse| { &mut m.value },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ScanResponse>(
                    "ScanResponse",
                    fields,
                    file_descriptor_proto(),
                )
            })
        }
    }

    fn default_instance() -> &'static ScanResponse {
        static mut instance: ::protobuf::lazy::Lazy<ScanResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ScanResponse,
        };
        unsafe {
            instance.get(ScanResponse::new)
        }
    }
}

impl ::protobuf::Clear for ScanResponse {
    fn clear(&mut self) {
        self.status = Status::OK;
        self.key.clear();
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ScanResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ScanResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone, PartialEq, Eq, Debug, Hash)]
pub enum Operation {
    PUT = 0,
    GET = 1,
    DEL = 2,
    MERGE = 3,
}

impl ::protobuf::ProtobufEnum for Operation {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Operation> {
        match value {
            0 => ::std::option::Option::Some(Operation::PUT),
            1 => ::std::option::Option::Some(Operation::GET),
            2 => ::std::option::Option::Some(Operation::DEL),
            3 => ::std::option::Option::Some(Operation::MERGE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Operation] = &[
            Operation::PUT,
            Operation::GET,
            Operation::DEL,
            Operation::MERGE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("Operation", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for Operation {}

impl ::std::default::Default for Operation {
    fn default() -> Self {
        Operation::PUT
    }
}

impl ::protobuf::reflect::ProtobufValue for Operation {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(Clone, PartialEq, Eq, Debug, Hash)]
pub enum Status {
    OK = 0,
    Err = 1,
    NotFound = 2,
    InvalidRegex = 3,
}

impl ::protobuf::ProtobufEnum for Status {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Status> {
        match value {
            0 => ::std::option::Option::Some(Status::OK),
            1 => ::std::option::Option::Some(Status::Err),
            2 => ::std::option::Option::Some(Status::NotFound),
            3 => ::std::option::Option::Some(Status::InvalidRegex),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Status] = &[
            Status::OK,
            Status::Err,
            Status::NotFound,
            Status::InvalidRegex,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("Status", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for Status {}

impl ::std::default::Default for Status {
    fn default() -> Self {
        Status::OK
    }
}

impl ::protobuf::reflect::ProtobufValue for Status {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0fkv_server.proto\x12\tkv_server\"e\n\x07Request\x122\n\toperation\
    \x18\x01\x20\x01(\x0e2\x14.kv_server.OperationR\toperation\x12\x10\n\x03\
    key\x18\x02\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x03\x20\x01(\tR\
    \x05value\"K\n\x08Response\x12)\n\x06status\x18\x01\x20\x01(\x0e2\x11.kv\
    _server.StatusR\x06status\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05valu\
    e\"9\n\x0bScanRequest\x12\x14\n\x05range\x18\x02\x20\x01(\x03R\x05range\
    \x12\x14\n\x05regex\x18\x03\x20\x01(\tR\x05regex\"a\n\x0cScanResponse\
    \x12)\n\x06status\x18\x01\x20\x01(\x0e2\x11.kv_server.StatusR\x06status\
    \x12\x10\n\x03key\x18\x02\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x03\
    \x20\x01(\tR\x05value*1\n\tOperation\x12\x07\n\x03PUT\x10\0\x12\x07\n\
    \x03GET\x10\x01\x12\x07\n\x03DEL\x10\x02\x12\t\n\x05MERGE\x10\x03*9\n\
    \x06Status\x12\x06\n\x02OK\x10\0\x12\x07\n\x03Err\x10\x01\x12\x0c\n\x08N\
    otFound\x10\x02\x12\x10\n\x0cInvalidRegex\x10\x032{\n\x08KVServer\x122\n\
    \x05Serve\x12\x12.kv_server.Request\x1a\x13.kv_server.Response\"\0\x12;\
    \n\x04Scan\x12\x16.kv_server.ScanRequest\x1a\x17.kv_server.ScanResponse\
    \"\00\x01J\xdd\n\n\x06\x12\x04\0\0.\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\
    \n\x08\n\x01\x02\x12\x03\x02\0\x12\n\n\n\x02\x06\0\x12\x04\x04\0\t\x01\n\
    \n\n\x03\x06\0\x01\x12\x03\x04\x08\x10\n\x0c\n\x04\x06\0\x02\0\x12\x04\
    \x05\x04\x06\x05\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x05\x08\r\n\x0c\n\
    \x05\x06\0\x02\0\x02\x12\x03\x05\x0f\x16\n\x0c\n\x05\x06\0\x02\0\x03\x12\
    \x03\x05!)\n\x0c\n\x04\x06\0\x02\x01\x12\x04\x07\x04\x08\x05\n\x0c\n\x05\
    \x06\0\x02\x01\x01\x12\x03\x07\x08\x0c\n\x0c\n\x05\x06\0\x02\x01\x02\x12\
    \x03\x07\x0e\x19\n\x0c\n\x05\x06\0\x02\x01\x06\x12\x03\x07$*\n\x0c\n\x05\
    \x06\0\x02\x01\x03\x12\x03\x07+7\n\n\n\x02\x05\0\x12\x04\x0b\0\x10\x01\n\
    \n\n\x03\x05\0\x01\x12\x03\x0b\x05\x0e\n\x0b\n\x04\x05\0\x02\0\x12\x03\
    \x0c\x04\x0c\n\x0c\n\x05\x05\0\x02\0\x01\x12\x03\x0c\x04\x07\n\x0c\n\x05\
    \x05\0\x02\0\x02\x12\x03\x0c\n\x0b\n\x0b\n\x04\x05\0\x02\x01\x12\x03\r\
    \x04\x0c\n\x0c\n\x05\x05\0\x02\x01\x01\x12\x03\r\x04\x07\n\x0c\n\x05\x05\
    \0\x02\x01\x02\x12\x03\r\n\x0b\n\x0b\n\x04\x05\0\x02\x02\x12\x03\x0e\x04\
    \x0c\n\x0c\n\x05\x05\0\x02\x02\x01\x12\x03\x0e\x04\x07\n\x0c\n\x05\x05\0\
    \x02\x02\x02\x12\x03\x0e\n\x0b\n\x0b\n\x04\x05\0\x02\x03\x12\x03\x0f\x04\
    \x0e\n\x0c\n\x05\x05\0\x02\x03\x01\x12\x03\x0f\x04\t\n\x0c\n\x05\x05\0\
    \x02\x03\x02\x12\x03\x0f\x0c\r\n\n\n\x02\x05\x01\x12\x04\x12\0\x18\x01\n\
    \n\n\x03\x05\x01\x01\x12\x03\x12\x05\x0b\n\x0b\n\x04\x05\x01\x02\0\x12\
    \x03\x13\x04\x0b\n\x0c\n\x05\x05\x01\x02\0\x01\x12\x03\x13\x04\x06\n\x0c\
    \n\x05\x05\x01\x02\0\x02\x12\x03\x13\t\n\n\x0b\n\x04\x05\x01\x02\x01\x12\
    \x03\x14\x04\x0c\n\x0c\n\x05\x05\x01\x02\x01\x01\x12\x03\x14\x04\x07\n\
    \x0c\n\x05\x05\x01\x02\x01\x02\x12\x03\x14\n\x0b\n\x0b\n\x04\x05\x01\x02\
    \x02\x12\x03\x15\x04\x11\n\x0c\n\x05\x05\x01\x02\x02\x01\x12\x03\x15\x04\
    \x0c\n\x0c\n\x05\x05\x01\x02\x02\x02\x12\x03\x15\x0f\x10\n\"\n\x04\x05\
    \x01\x02\x03\x12\x03\x16\x04\x15\"\x15\x20\x20\x20\x20MergeLocked\x20=\
    \x204;\n\n\x0c\n\x05\x05\x01\x02\x03\x01\x12\x03\x16\x04\x10\n\x0c\n\x05\
    \x05\x01\x02\x03\x02\x12\x03\x16\x13\x14\n\n\n\x02\x04\0\x12\x04\x1a\0\
    \x1e\x01\n\n\n\x03\x04\0\x01\x12\x03\x1a\x08\x0f\n\x0b\n\x04\x04\0\x02\0\
    \x12\x03\x1b\x04\x1c\n\r\n\x05\x04\0\x02\0\x04\x12\x04\x1b\x04\x1a\x11\n\
    \x0c\n\x05\x04\0\x02\0\x06\x12\x03\x1b\x04\r\n\x0c\n\x05\x04\0\x02\0\x01\
    \x12\x03\x1b\x0e\x17\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x1b\x1a\x1b\n\
    \x0b\n\x04\x04\0\x02\x01\x12\x03\x1c\x04\x13\n\r\n\x05\x04\0\x02\x01\x04\
    \x12\x04\x1c\x04\x1b\x1c\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x1c\x04\n\
    \n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x1c\x0b\x0e\n\x0c\n\x05\x04\0\x02\
    \x01\x03\x12\x03\x1c\x11\x12\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x1d\x04\
    \x15\n\r\n\x05\x04\0\x02\x02\x04\x12\x04\x1d\x04\x1c\x13\n\x0c\n\x05\x04\
    \0\x02\x02\x05\x12\x03\x1d\x04\n\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\
    \x1d\x0b\x10\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x1d\x13\x14\n\n\n\x02\
    \x04\x01\x12\x04\x20\0#\x01\n\n\n\x03\x04\x01\x01\x12\x03\x20\x08\x10\n\
    \x0b\n\x04\x04\x01\x02\0\x12\x03!\x04\x16\n\r\n\x05\x04\x01\x02\0\x04\
    \x12\x04!\x04\x20\x12\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03!\x04\n\n\x0c\
    \n\x05\x04\x01\x02\0\x01\x12\x03!\x0b\x11\n\x0c\n\x05\x04\x01\x02\0\x03\
    \x12\x03!\x14\x15\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\"\x04\x15\n\r\n\
    \x05\x04\x01\x02\x01\x04\x12\x04\"\x04!\x16\n\x0c\n\x05\x04\x01\x02\x01\
    \x05\x12\x03\"\x04\n\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\"\x0b\x10\n\
    \x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\"\x13\x14\n\n\n\x02\x04\x02\x12\
    \x04%\0(\x01\n\n\n\x03\x04\x02\x01\x12\x03%\x08\x13\n\x0b\n\x04\x04\x02\
    \x02\0\x12\x03&\x04\x14\n\r\n\x05\x04\x02\x02\0\x04\x12\x04&\x04%\x15\n\
    \x0c\n\x05\x04\x02\x02\0\x05\x12\x03&\x04\t\n\x0c\n\x05\x04\x02\x02\0\
    \x01\x12\x03&\n\x0f\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03&\x12\x13\n\x0b\
    \n\x04\x04\x02\x02\x01\x12\x03'\x04\x15\n\r\n\x05\x04\x02\x02\x01\x04\
    \x12\x04'\x04&\x14\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03'\x04\n\n\x0c\
    \n\x05\x04\x02\x02\x01\x01\x12\x03'\x0b\x10\n\x0c\n\x05\x04\x02\x02\x01\
    \x03\x12\x03'\x13\x14\n\n\n\x02\x04\x03\x12\x04*\0.\x01\n\n\n\x03\x04\
    \x03\x01\x12\x03*\x08\x14\n\x0b\n\x04\x04\x03\x02\0\x12\x03+\x04\x16\n\r\
    \n\x05\x04\x03\x02\0\x04\x12\x04+\x04*\x16\n\x0c\n\x05\x04\x03\x02\0\x06\
    \x12\x03+\x04\n\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03+\x0b\x11\n\x0c\n\
    \x05\x04\x03\x02\0\x03\x12\x03+\x14\x15\n\x0b\n\x04\x04\x03\x02\x01\x12\
    \x03,\x04\x13\n\r\n\x05\x04\x03\x02\x01\x04\x12\x04,\x04+\x16\n\x0c\n\
    \x05\x04\x03\x02\x01\x05\x12\x03,\x04\n\n\x0c\n\x05\x04\x03\x02\x01\x01\
    \x12\x03,\x0b\x0e\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03,\x11\x12\n\x0b\
    \n\x04\x04\x03\x02\x02\x12\x03-\x04\x15\n\r\n\x05\x04\x03\x02\x02\x04\
    \x12\x04-\x04,\x13\n\x0c\n\x05\x04\x03\x02\x02\x05\x12\x03-\x04\n\n\x0c\
    \n\x05\x04\x03\x02\x02\x01\x12\x03-\x0b\x10\n\x0c\n\x05\x04\x03\x02\x02\
    \x03\x12\x03-\x13\x14b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
